/* EXAMPLE PROBLEM *\

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main () {
    int scores[4];
    scores[0] = 69;
    scores[1] = 79;
    scores[2] = 89;
    scores[3] = 99;
    cout<<"Your scores were: ";
    cout<<scores[0]<<", ";
    cout<<scores[1]<<", ";
    cout<<scores[2]<<", ";
    cout<<scores[3]<<endl;
    return 0;
}
RESULTS
Your scores were: 69, 79, 89, 99

/* EXAMPLE PROBLEM *\
-Just an example to get started. You could just as well have used four
variables called score1...score4
-You create an array with a similar approach to creating any other 
variable - it has to have a type and name. The main difference is that
you have to tell the compiler ho many of these things (called array elements;
in this case scores) you want.
-In this example, we simply assign values to the array and then display
them one at a time. The true value of arrays is demonstrated when you 
combine them with loops, as is done in the next example. 

/* EXAMPLE PROBLEM *\

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main () {
    int scores [4];
    scores [0] = 69;
    scores [1] = 79;
    scores [2] = 89;
    scores [3] = 99;
    cout<<"Your scores were: ";
    int counter = 0;
    while (counter 4) {
        cout<<scores[counter]<< ", ";
        counter = counter + 1;
    }
    return 0;
}
RESULTS
Your scores were: 69, 79, 89, 99, 

/** One small issue here is that the program displays an extra comma
at the end of the output. This is easily fixed with an if statement,
as shown below: **\

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main () {
    int scores [4];
    scores [0] = 69;
    scores [1] = 79;
    scores [2] = 89;
    scores [3] = 99;
    cout<<"Your scores were: ";
    int counter = 0;
    while (counter 4) {
        cout<<scores[counter];
        if (counter 3) {            //IF STATEMENT HERE
            cout<<", ";
        }
        counter = counter + 1;
    }
    return 0;
}
RESULTS
Your scores were: 69, 79, 89, 99

With this example, though, we still yse one line to fill each 
element of the array, which requires that we know the answers ahead
of time. How about getting the data from the user instead?
That is the purpose of the next example. 

/* EXAMPLE PROBLEM *\

Following program demonstrates how to get data from the user
to populate (put data into) the array:

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main () {
    int scores [4];
    int counter = 0;
    while (counter 4) {
        cout<<"Enter a score: ";            //FIRST LOOP 
        cin>>scores[counter];               //FOR INPUT
        cout<<scores[counter]<<endl;
        counter = counter + 1;
    }
    cout<<"Your scores were: ";
    counter = 0;
    while (counter 4) {                 //SECOND LOOP
        cout<<scores[counter];          //FOR OUTPUT
        if (counter 3) {
            cout<<", ";
        }
        counter = counter + 1;
    }
    return 0;
}
RESULTS
Enter a score: 69
Enter a score: 79
Enter a score: 89
Enter a score: 99
Your scores were: 69, 79, 89, 99

Using this approach, the program could easily be changed to handle,
for example, ten scores by replacing all of the fours with tens in the 
program. But what if you don't know ahead of time how many scores there will be?
This is the subject of the next example. 

/* EXAMPLE PROBLEM *\

Processing an unknown number of inputs

Unfortunately, it's a requirement that you pre-define the size of
an array, and so you can't change the array if you've set the size to,
say, ten, and the user wants to add fifteen. (Actually, you can do this,
but how is beyond the scope of this book.) However, what you can do is to
set the size of the array to be as large as you think the user will ever need,
and just allow for the user to stop when s/he is out of data. The
Foloowing program demonstrates how to do this:

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main() {
    int scores[25];
    int counter = 0;
    string go_on = "yes";
    while (go_on == "yes") {
        cout<<"Enter a score (-1 to stop): ";
        cin>>scores[counter];
        cout<<scores[counter]<<endl;
        if (scores[counter] == -1) {
            go_on = "no";
        }
        else {
            counter = counter + 1;
        }
    }
    cout<<"Your scores were: ";
    int counter2 = 0;
    while (counter2) {
        cout<<scores[counter2];
        if (counter2 (counter-1)) {
            cout<<", ";
        }
        counter2 = counter2 + 1;
    }
    return 0;
}
RESULTS
Enter a score (-1 to stop): 49
Enter a score (-1 to stop): 59
Enter a score (-1 to stop): 69
Enter a score (-1 to stop): 79
Enter a score (-1 to stop): 89
Enter a score (-1 to stop): 99
Enter a score (-1 to stop): -1
Your scores were: 49, 59, 69, 79, 89, 99

Note the following:
1) The array size is set to 25, which is a guess as to
the maximum number of scores the user will want to add. More
will be said about this later.
2) We have to create our own loop control variable, 
called go_on here. This is initially set to "yes" and is 
changed to "no" when the user enters a -1.
3) We use counter to determine how many valid entries the
user has entered . Note that if the user enters a -1
then counter is not incremented. This means that the porgram
will not display the -1 to the screen when dumping the array
contents.

/* EXAMPLE PROBLEM *\

Stopping the loop before too many items are entered

The design flaw in the example above^. Even though we
have created enough space for 25 elements, there is nothing
stopping the user from continuing to enter scores past this number.
If you run this program and enter 26 elements in the array, you are likely
to see a run-time error; exactly how this will show up will vary based on what environment 
you're using. 

Another possibility is that your porgram can fail but not tell you about it - 
this is called failing silently. This is a particularly insidious kind of error
because it can go undetected all through development and testing and only
show up after you have released the program to the public. When you hear in 
the news about some catastrophic software error bringing down a telephone
network or something similar, it is often because of errors that lie dormant in
software for a long time and then suddenly pop up under a specific set ofcircumstances.
In our little example here, we need to add some protection (called an error trap)
from this run-time error, as shown below. 

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main() {
    int scores [10];
    int counter = 0;
    string go_on = "yes";
    while (go_on == "yes") {
        if (counter >= 10) {
            cout<<"Out of array space!";
            cout<<endl;
            go_on = "no";
        }
        else {
            cout<<"Enter a score (-1 to stop): ";
            cin>>scores[counter];
            cout<<scores[counter]<<endl;
            if (scores[counter] == -1) {
                go_on = "no";
            }
            else {
                counter = counter + 1;
            }
        }
    }
    cout<<"Your scores were: ";
    int counter2 = 0;
    while (counter2 < counter) {
        cout<<scores[counter2];
        if (counter2 < (counter-1)) {
            cout<<", ";
        }
        counter2 = counter2 + 1;
    }
    return 0;
}
RESULTS
Enter a score (-1 to stop): 1
Enter a score (-1 to stop): 2
Enter a score (-1 to stop): 3
Enter a score (-1 to stop): 4
Enter a score (-1 to stop): 5
Enter a score (-1 to stop): 6
Enter a score (-1 to stop): 7
Enter a score (-1 to stop): 8
Enter a score (-1 to stop): 9
Enter a score (-1 to stop): 10
Out of array space!
Your scores were: 1, 2, 3, 4, 5, 6, 7, 8, 9, 10

1) Array size changed to 10 to fit on screen.
2) When the loop is entered, counter is tested to make sure that it is in
bounds. Checking afterwards does not make any sense (it would be too late!).
3) The loop stops if counter is greater than or equal to the array size. The 
reason for this is the zero offset - the array goes from position 0 to position 
9 (10 elements total).
4) Note the following design pattern: If you want the program to do or not do
something in a certain situation, just insert an if statement in the code.
This is surprisingly hard for some students to incorporate into their toolbox
of strategies, and yet it is fundamental to most programming problems.

/* EXAMPLE PROBLEM *\

Calculating statistics on the array 

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main() {
    int scores [10];
    int counter = 0;
    int total = 0;          //
    string go_on = "yes";
    while (go_on == "yes") {
        if (counter >= 10) {
            cout<<"Out of array space!";
            cout<<endl;
            go_on = "no";
        }
        else {
            cout<<"Enter a score (-1 to stop): ";
            cin>>scores[counter];
            cout<<scores[counter]<<endl;
            if (scores[counter] == -1) {
                go_on = "no";
            }
            else {
                total = total + scores[counter];
                counter = counter + 1;
            }
        }
    }
    cout<<"Your scores were: ";
    int counter2 = 0;
    while (counter2 < counter) {
        cout<<scores[counter2];
        if (counter2 < (counter-1)) {
            cout<<", ";
        }
        counter2 = counter2 + 1;
    }
    cout<<endl;                         //
    cout<<"There were " <<counter;
    cout<<" data values." << endl;
    if (counter > 0) {
        float average = total / counter;
        cout<<"The average was ";
        cout<<average<<endl;            //
    }
    return 0;
}

RESULTS
Enter a score (-1 to stop): 11
Enter a score (-1 to stop): 22
Enter a score (-1 to stop): 33
Enter a score (-1 to stop): 44
Enter a score (-1 to stop): 55
Enter a score (-1 to stop): -1
Your scores were: 11, 22, 33, 44, 55
There were 5 data values.
The average was 33

Note:
1) We create a variable called total and initialize to zero. each time
through the loop we add the next value from the array to total. In the end,
this gives us the total of all of the values in the array. 
This is a standard approach to calculating anything you want on an array of numeric data
values; you could use this same approach to calculate the standard deviation, the minimum
and maximum values, etc. 
2) Notice that the denominator of the average if just counterer because we started
at position zero. This helps to explain the answer to the oft-asked question:
why do arrays start at position zero? The reason is that, once you get used to it, this
approach makes a lot of other aspects of your porgrams more natural. 

/* EXAMPLE PROBLEM *\







/*EXERCISES *\

Exercise 10.1.
Write a program that asks the user for up to 10 integers (it could be fewer);
stop prompting when the user enters zero. Then list the numbers in reverse order. Use the following
example run as a guide.

Enter a number (0 to stop): 34
Enter a number (0 to stop): 87
Enter a number (0 to stop): 21
Enter a number (0 to stop): 98
Enter a number (0 to stop): 3
Enter a number (0 to stop): 0
Reverse order: 3, 98, 21, 87, 34

#include <iostream>
#include <string>
using namespace std;

int main() {
    int numbers [10];
    int counter = 0;
    string go_on = "yes";
    
    while (go_on == "yes") {
        cout<<"Enter a number (0 to stop): ";
        if (counter >= 10) {
            cout<<"Out of array spaces!" << endl;
            go_on = "no;
        }
        else {
            cin>>numbers[counter];
            cout<<numbers[counter] << endl;
            if (numbers[counter] != 0) {
                counter = counter + 1;
            }
            else {
                go_on = "no";
            }
        }
    }
    int counter2 = counter-1;
    cout<<"Your numbers in reverse order are: ";
    cout<<endl;
    while (counter2 >= 0) {
        cout<<numbers[counter2];
        if (counter2 > 0) {
            cout<<", ";
        }
        counter2 = counter2 - 1;
    }
    cout<<endl;   
    return 0;
}

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Exercise 10.2.
Write a program that collects weights and stores them in an array of floats.
Assume that there will not be more than 20. Keep track of the highest weight entered.
When the user enters a weight of 0 (zero)
stop asking. use the following run as a guide.

Enter a weight (zero to stop): 33.3
Enter a weight (zero to stop): 66.6
Enter a weight (zero to stop): 77.7
Enter a weight (zero to stop): 11.1
Enter a weight (zero to stop): 0
The maximum was 77.7

#include <iostream>
#include <iomanip>
#include <string>
using namespace std;

int main() {
    float weights [20];
    float maximum;
    int counter = 0;
    string go_on = "yes";
    while (go_on == "yes") {
        cout<<"Enter a weight (0 to stop): ";
        if (counter >= 20) {
            cout<<"Out of array spaces!" << endl;
            go_on = "no";
        }
        else {
            cin>>weights[counter];
            cout<<weights[counter]<<endl;
            if (counter == 0) {
                maximum = weights[counter];
            }
            if (weights[counter] != 0) {
                if (weights[counter] > maximum) {
                    maximum = weights[counter];                }
            }
            counter = counter + 1;
        }
        else {
            go_on = "no";
        }
    }
}
cout<<"The maximum was: ";
cout<<maximum<<endl;   
    return 0;
}
RESULTS
Enter a weight (0 to stop): 33.3
Enter a weight (0 to stop): 66.6
Enter a weight (0 to stop): 22.2
Enter a weight (0 to stop): 77.7
Enter a weight (0 to stop): 11.1
Enter a weight (0 to stop): 0
The maximum was 77.7

/*EXERCISES *\
